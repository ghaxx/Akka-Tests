//akka.stream.materializer.debug.fuzzing-mode = on

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    default-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 1
      }
      throughput = 100
    }
  }
}


kafka {
  parallelism: 8

  consumer {
    poll-interval = 50ms
    poll-timeout = 500ms
    poll-commit-timeout = 500ms
    stop-timeout = 300s
    close-timeout = 200s
    commit-timeout = 500s
    use-dispatcher = "akka.actor.default-dispatcher"
    wakeup-timeout = 5s
    max-wakeups = 100000
    parallelism = 1
    kafka-clients {
      bootstrap.servers = "localhost:9092"
      bootstrap.servers = ${?KAFKA_SERVERS}
      reconnect.backoff.ms = 1000
      auto.offset.reset = "earliest"
      group.id = "testing"
      enable.auto.commit = false
      auto.commit.interval.ms = 1000
      client.id = "testing-client"
      client.id = ${?KAFKA_CLIENT_ID}
      max.poll.records = 1
      max.poll.records = ${?MAX_POLL_SIZE}
    }
  }

  producer {
    use-dispatcher = "akka.actor.default-dispatcher"
    parallelism = 1
    close-timeout = 60s

    kafka-clients {
      bootstrap.servers = "localhost:9092"
      bootstrap.servers = ${?KAFKA_SERVERS}
      key.serializer = "org.apache.kafka.common.serialization.StringSerializer"
      value.serializer = "org.apache.kafka.common.serialization.StringSerializer"
      reconnect.backoff.ms = 1000
      batch.size = 1
    }
  }
}